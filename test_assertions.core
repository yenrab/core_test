%% MIT License
%%
%% Copyright (c) 2025 Lee Barney
%%
%% Permission is hereby granted, free of charge, to any person obtaining a copy
%% of this software and associated documentation files (the "Software"), to deal
%% in the Software without restriction, including without limitation the rights
%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
%% copies of the Software, and to permit persons to whom the Software is
%% furnished to do so, subject to the following conditions:
%%
%% The above copyright notice and this permission notice shall be included in all
%% copies or substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
%% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
%% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
%% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
%% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
%% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
%% SOFTWARE.

module 'test_assertions'
    ['assert_equal'/2, 'assert_true'/1, 'assert_false'/1, 'assert_not_equal'/2, 'assert_match'/2, 'assert_equal!'/2, 'assert_true!'/1, 'assert_false!'/1, 'assert_not_equal!'/2, 'assert_match!'/2]
    attributes []
    'assert_equal'/2 =
        fun (Actual, Expected) ->
            case call 'erlang':'==' (Actual, Expected) of
                <'true'> when 'true' -> {'pass'}
                <'false'> when 'true' -> {'fail', Actual, Expected}
            end
    
    'assert_true'/1 =
        fun (Value) ->
            case Value of
                <'true'> when 'true' -> {'pass'}
                <'false'> when 'true' -> {'fail', Value, 'true'}
            end
    
    'assert_false'/1 =
        fun (Value) ->
            case Value of
                <'false'> when 'true' -> {'pass'}
                <'true'> when 'true' -> {'fail', Value, 'false'}
            end
    
    'assert_not_equal'/2 =
        fun (Actual, Expected) ->
            case call 'erlang':'==' (Actual, Expected) of
                <'false'> when 'true' -> {'pass'}
                <'true'> when 'true' -> {'fail', Actual, Expected}
            end
    
    'assert_match'/2 =
        fun (Value, Pattern) ->
            case call 'erlang':'==' (Value, Pattern) of
                <'true'> when 'true' -> {'pass'}
                <'false'> when 'true' -> {'fail', Value, Pattern}
            end
    
    'assert_equal!'/2 =
        fun (Actual, Expected) ->
            case call 'erlang':'==' (Actual, Expected) of
                <'true'> when 'true' -> 'ok'
                <'false'> when 'true' -> call 'erlang':'throw' ({'assertion_failed', 'assert_equal', Actual, Expected})
            end
    
    'assert_true!'/1 =
        fun (Value) ->
            case Value of
                <'true'> when 'true' -> 'ok'
                <'false'> when 'true' -> call 'erlang':'throw' ({'assertion_failed', 'assert_true', Value, 'true'})
            end
    
    'assert_false!'/1 =
        fun (Value) ->
            case Value of
                <'false'> when 'true' -> 'ok'
                <'true'> when 'true' -> call 'erlang':'throw' ({'assertion_failed', 'assert_false', Value, 'false'})
            end
    
    'assert_not_equal!'/2 =
        fun (Actual, Expected) ->
            case call 'erlang':'==' (Actual, Expected) of
                <'false'> when 'true' -> 'ok'
                <'true'> when 'true' -> call 'erlang':'throw' ({'assertion_failed', 'assert_not_equal', Actual, Expected})
            end
    
    'assert_match!'/2 =
        fun (Value, Pattern) ->
            case call 'erlang':'==' (Value, Pattern) of
                <'true'> when 'true' -> 'ok'
                <'false'> when 'true' -> call 'erlang':'throw' ({'assertion_failed', 'assert_match', Value, Pattern})
            end
end
