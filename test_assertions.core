module 'test_assertions'
    ['assert_equal'/2, 'assert_true'/1, 'assert_false'/1, 'assert_not_equal'/2, 'assert_match'/2, 'assert_equal!'/2, 'assert_true!'/1, 'assert_false!'/1, 'assert_not_equal!'/2, 'assert_match!'/2]
    attributes []
    'assert_equal'/2 =
        fun (Actual, Expected) ->
            case call 'erlang':'==' (Actual, Expected) of
                <'true'> when 'true' -> {'pass'}
                <'false'> when 'true' -> {'fail', Actual, Expected}
            end
    
    'assert_true'/1 =
        fun (Value) ->
            case Value of
                <'true'> when 'true' -> {'pass'}
                <'false'> when 'true' -> {'fail', Value, 'true'}
            end
    
    'assert_false'/1 =
        fun (Value) ->
            case Value of
                <'false'> when 'true' -> {'pass'}
                <'true'> when 'true' -> {'fail', Value, 'false'}
            end
    
    'assert_not_equal'/2 =
        fun (Actual, Expected) ->
            case call 'erlang':'==' (Actual, Expected) of
                <'false'> when 'true' -> {'pass'}
                <'true'> when 'true' -> {'fail', Actual, Expected}
            end
    
    'assert_match'/2 =
        fun (Value, Pattern) ->
            case call 'erlang':'==' (Value, Pattern) of
                <'true'> when 'true' -> {'pass'}
                <'false'> when 'true' -> {'fail', Value, Pattern}
            end
    
    'assert_equal!'/2 =
        fun (Actual, Expected) ->
            case call 'erlang':'==' (Actual, Expected) of
                <'true'> when 'true' -> 'ok'
                <'false'> when 'true' -> call 'erlang':'throw' ({'assertion_failed', 'assert_equal', Actual, Expected})
            end
    
    'assert_true!'/1 =
        fun (Value) ->
            case Value of
                <'true'> when 'true' -> 'ok'
                <'false'> when 'true' -> call 'erlang':'throw' ({'assertion_failed', 'assert_true', Value, 'true'})
            end
    
    'assert_false!'/1 =
        fun (Value) ->
            case Value of
                <'false'> when 'true' -> 'ok'
                <'true'> when 'true' -> call 'erlang':'throw' ({'assertion_failed', 'assert_false', Value, 'false'})
            end
    
    'assert_not_equal!'/2 =
        fun (Actual, Expected) ->
            case call 'erlang':'==' (Actual, Expected) of
                <'false'> when 'true' -> 'ok'
                <'true'> when 'true' -> call 'erlang':'throw' ({'assertion_failed', 'assert_not_equal', Actual, Expected})
            end
    
    'assert_match!'/2 =
        fun (Value, Pattern) ->
            case call 'erlang':'==' (Value, Pattern) of
                <'true'> when 'true' -> 'ok'
                <'false'> when 'true' -> call 'erlang':'throw' ({'assertion_failed', 'assert_match', Value, Pattern})
            end
end
